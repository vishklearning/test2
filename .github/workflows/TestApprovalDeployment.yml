# Welcome Vishwanath Karalapati
name: Approval Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
     - name: Checkout
       uses: actions/checkout@v3
     - name: Setup Node
       uses: actions/setup-node@v3
       with:
          node-version: "18"
     - name: Install SFDX CLI
       run: npm install sfdx-cli --global
      # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
     - name: 'Installing sfdx git delta'
       run: | 
             echo y | sfdx plugins:install sfdx-git-delta
             sfdx plugins 
     - name: 'Get all test files in repo'
       run: |
              node ./parseAllTests.js              
              ALLTESTS=$(cat testsAll.txt)       
              echo "APEX_TESTS_ALL=$ALLTESTS" >> $GITHUB_ENV
              echo ${{ github.event.push.head.sha }}
     - name: Check APEX
       uses: legetz/setup-pmd@v6.48
     - run: pmd --dir ./force-app/main/default/classes -R category/apex/design.xml      
     - name: 'Create delta packages for new, modified or deleted metadata'
       run: | 
            mkdir changed-sources
            sfdx sgd:source:delta --to "HEAD" --from $(git merge-base HEAD origin/main) --output changed-sources/ --generate-delta --source force-app/
     - name: upload artiface
       uses: actions/upload-artifact@v3.1.2
       with: 
          name: TempArtifact
          path: force-app/
    
  DeployDev:
    name: Deploy to Dev 
    if: github.event_name == 'pull_request'
    needs: [Build]
    runs-on: ubuntu-latest
    environment: 
      name: Develop
      url: 'http://dev.myapp.com'
    steps:
       - name: Checkout
         uses: actions/checkout@v3
       - name: Download Artifact
         uses: actions/download-artifact@v3
       - name: Setup Node
         uses: actions/setup-node@v3
         with:
          node-version: "18"
       - name: Install SFDX CLI
         run: npm install sfdx-cli --global
      # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
       - name: 'Installing sfdx git delta'
         run: | 
             echo y | sfdx plugins:install sfdx-git-delta
             sfdx plugins 
       - name: 'force logout'
         run: sfdx force:auth:logout --all --noprompt
       - name: Populate auth file with SFDX_URL secret of target org
         run: |
          echo ${{ secrets.Dev_URL}} > ./Dev_URL.txt
          echo ${{ secrets.Dev_URL}}
       - name: Authticate the URL
         run: sfdx auth:jwt:grant --username vishksalesforce@gmail.com.dev1 -f ./assests/server.key -i 3MVG9OjW2TAjFKUvMO.2ZqzAwK6pcsQgJU4Fj45jsD6_FWjV2uwH4cPcG0pOIkYxCxS0jl25186Se.tkjCcbW -r https://computing-efficiency-483.scratch.my.salesforce.com
        # sfdx auth:jwt:grant -u me@acme.org -f <path to jwt key file> -i <OAuth client id> -r https://acme.my.salesforce.com
        # run: sfdx force:auth:jwt:grant --client-id 3MVG9OjW2TAjFKUvMO.2ZqzAwK6pcsQgJU4Fj45jsD6_FWjV2uwH4cPcG0pOIkYxCxS0jl25186Se.tkjCcbW --jwt-key-file ./assests/server.key --username vishksalesforce@gmail.com.dev1 --alias my-hub-org --instance-url https://computing-efficiency-483.scratch.my.salesforce.com 
        # run:  sfdx auth:web:login -i ${{ secrets.Client_ID}}  --instance-url=${{secrets.Instance_URL}}
        # sfdx force:org:display -u MyAliasName --verbose
   #   - name: List of Authenticated Orgs
   #     run: sfdx org list
   #   - name: Authenticate to target Org
   #     run: sfdx auth:sfdxurl:store -f ./Dev_URL.txt -s -a targetOrg
       - name: Deployment - run all tests
         run: >
          sfdx force:source:deploy -p "force-app" --checkonly --testlevel RunLocalTests --json! 
    
  DeployStaging:
    name: Deploy to Staging 
    if: github.event.ref == 'refs/heads/main'
    needs: [Build]
    runs-on: ubuntu-latest
    environment: 
      name: Staging
      url: 'http://test.myapp.com'
    steps:
      - name: Deploy
        run: echo I am deploying! 
            
  DeployProd:
    name: Deploy to Production 
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    environment: 
      name: Production
      url: 'http://www.myapp.com'
    steps:
      - name: Deploy
        run: echo I am deploying! 
    
